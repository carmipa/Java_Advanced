
/* --- src\main\java\br\com\fiap\money_flow_api\App.java --- */
package br.com.fiap.money_flow_api;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.info.Info;

@SpringBootApplication
@EnableCaching
@OpenAPIDefinition(info = @Info(title = "API do Money Flow", description = "Aqui vai a descrição", version = "v1"))
public class App {

	public static void main(String[] args) {
		SpringApplication.run(App.class, args);
	}

}

================================================================================

/* --- src\main\java\br\com\fiap\money_flow_api\config\DatabaseSeeder.java --- */
package br.com.fiap.money_flow_api.config;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;

import br.com.fiap.money_flow_api.model.Category;
import br.com.fiap.money_flow_api.repository.CategoryRepository;
import jakarta.annotation.PostConstruct;

@Configuration
public class DatabaseSeeder {

    @Autowired
    private CategoryRepository categoryRepository;

    @PostConstruct
    public void init() {
        var categories = List.of(
                Category.builder().name("Educação").icon("Book").build(),
                Category.builder().name("Transporte").icon("Bus").build(),
                Category.builder().name("Saúde").icon("Heart").build(),
                Category.builder().name("Moradia").icon("House").build());

        categoryRepository.saveAll(categories);
    }

}

================================================================================

/* --- src\main\java\br\com\fiap\money_flow_api\controller\CategoryController.java --- */
package br.com.fiap.money_flow_api.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import br.com.fiap.money_flow_api.model.Category;
import br.com.fiap.money_flow_api.repository.CategoryRepository;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import jakarta.validation.Valid;

@RestController
@RequestMapping("categories")
public class CategoryController {

    private Logger log = LoggerFactory.getLogger(getClass());

    @Autowired // injeção de dependência
    private CategoryRepository repository;

    @GetMapping
    @Cacheable("categories")
    public List<Category> index() {
        return repository.findAll();
    }

    @PostMapping
    @CacheEvict(value = "categories", allEntries = true)
    @Operation(summary = "Cadastrar categoria", description = "Insere uma categoria...", responses = {
            @ApiResponse(responseCode = "201"),
            @ApiResponse(responseCode = "400"),
    })
    public ResponseEntity<Category> create(@RequestBody @Valid Category category) {
        log.info("Cadastrando..." + category.getName());
        repository.save(category);
        return ResponseEntity.status(201).body(category);
    }

    @GetMapping("{id}")
    public Category get(@PathVariable Long id) {
        log.info("Buscando categoria " + id);
        return getCategory(id);
    }

    @DeleteMapping("{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void destroy(@PathVariable Long id) {
        log.info("Apagando categoria " + id);
        repository.delete(getCategory(id));
    }

    @PutMapping("{id}")
    public Category update(@PathVariable Long id, @RequestBody @Valid Category category) {
        log.info("Atualizando categoria " + id + " " + category);

        getCategory(id);
        category.setId(id);
        repository.save(category);

        return category;
    }

    private Category getCategory(Long id) {
        return repository
                .findById(id)
                .orElseThrow(
                        () -> new ResponseStatusException(HttpStatus.NOT_FOUND));
    }

}

================================================================================

/* --- src\main\java\br\com\fiap\money_flow_api\controller\TransactionController.java --- */
package br.com.fiap.money_flow_api.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.fiap.money_flow_api.model.Transaction;
import br.com.fiap.money_flow_api.repository.TransactionRepository;

@RestController
@RequestMapping("transactions")
public class TransactionController {

    @Autowired
    private TransactionRepository repository;

    @GetMapping
    public List<Transaction> index(){
        return repository.findAll();
    }
    
}

================================================================================

/* --- src\main\java\br\com\fiap\money_flow_api\exception\ValidationHandler.java --- */
package br.com.fiap.money_flow_api.exception;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class ValidationHandler {

    record ValidationError(String field, String message){
        public ValidationError(FieldError fieldError) {
            this(fieldError.getField(), fieldError.getDefaultMessage());
        }
    }

    @ExceptionHandler(MethodArgumentNotValidException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public List<ValidationError> handle(MethodArgumentNotValidException e){
        return e.getFieldErrors()
                    .stream()
                    .map(ValidationError::new) //reference method
                    .toList();

    }
    
}

================================================================================

/* --- src\main\java\br\com\fiap\money_flow_api\model\Category.java --- */
package br.com.fiap.money_flow_api.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Category {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "campo obrigatório")
    @Size(min = 3, max = 255, message = "deve ter pelo menos 3 caracteres")
    private String name;

    @NotBlank(message = "campo obrigatório")
    @Pattern(regexp = "^[A-Z].*", message = "deve começar com maiúscula")
    private String icon;

}

================================================================================

/* --- src\main\java\br\com\fiap\money_flow_api\model\Transaction.java --- */
package br.com.fiap.money_flow_api.model;

import java.math.BigDecimal;
import java.time.LocalDate;

import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Past;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Positive;
import jakarta.validation.constraints.Size;
import lombok.Data;

@Entity
@Data
public class Transaction {

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "campo obrigatório")
    @Size(min = 5, max = 255, message = "deve ter pelo menos 5 caracteres")
    private String description;

    @Positive(message = "deve ser positivo")
    private BigDecimal amount;

    @PastOrPresent(message = "deve ser no passado")
    private LocalDate date;
    
    @NotNull(message = "campo obrigatório")
    @Enumerated(EnumType.STRING)
    private TransactionType type;

    @NotNull(message = "campo obrigatório")
    @ManyToOne
    private Category category;
}

================================================================================

/* --- src\main\java\br\com\fiap\money_flow_api\model\TransactionType.java --- */
package br.com.fiap.money_flow_api.model;

public enum TransactionType {
    EXPENSE,
    INCOME,
}

================================================================================

/* --- src\main\java\br\com\fiap\money_flow_api\repository\CategoryRepository.java --- */
package br.com.fiap.money_flow_api.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import br.com.fiap.money_flow_api.model.Category;

public interface CategoryRepository extends JpaRepository<Category, Long> {

}

================================================================================

/* --- src\main\java\br\com\fiap\money_flow_api\repository\TransactionRepository.java --- */
package br.com.fiap.money_flow_api.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import br.com.fiap.money_flow_api.model.Transaction;

public interface TransactionRepository extends JpaRepository<Transaction, Long>{
    
}

================================================================================

/* --- src\test\java\br\com\fiap\money_flow_api\MoneyFlowApiApplicationTests.java --- */
package br.com.fiap.money_flow_api;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class MoneyFlowApiApplicationTests {

	@Test
	void contextLoads() {
	}

}

================================================================================
